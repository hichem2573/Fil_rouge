<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVbCgB1WwoAdlwLAHdd
        DAB5Xw0AdFoJCnRaChJ1WwoddVsKJnVbCiZ1WwocdFoKEnRaCQh4XgwAd10MAHZcCwB1WwoAdVsKAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVbCgB1WwoAalQEAXNZ
        CRN1Wwo6dVwLaHZcC5B2XAuwdlwLuHddDMJ3XQzKd10MynddDMF2XQu4dlwLrnZcC4x2XApkdVsKN3NZ
        CBG6mUkAdVsKAHVbCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfGANAHRa
        Chp2XAtpd10MxHleDe56Xw74emAO/3thD/97YQ//e2EP/3thD/97YQ//e2EP/3thD/97YQ//emAO/3pf
        Dfd5Xg3ueF0MwHZcC2R0WgoXdlwLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHNZ
        CQB1WwoueF4MuXxiDvV+ZBD/f2QR/39kEf9/ZBH/f2QR/39kEf9/ZBH/f2QR/39kEf9/ZBH/f2QR/39k
        Ef9/ZBH/f2QR/39kEf9+YxD/fGEO9XheDLV1WwonclkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAc1kJBHhdC4qAZBD/hGgR/4RoEf+EaBH/hGgR/4RoEf+EaBH/hGgR/4RoEf+EaBH/hGgR/4Ro
        Ef+EaBH/hGgR/4RoEf+EaBH/hGgR/4RoEf+EaBH/gGQP/nhdC4JyWQkDAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABzWgkSe2AMvIdqEv+IaxP/iGsT/4hrE/+IaxP/iGsT/4hrE/+IaxP/iGsT/4hr
        E/+IaxP/iGsT/4hrE/+IaxP/iGsT/4hrE/+IaxP/iGsT/4hrE/+HahL/e2AMunNaCRMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAHrQAHRZBw98YAy4i24T/41wFP+NcBT/jXAU/41wFP+NcBT/jXAU/41w
        FP+NcBT/jXAU/41wFP+NcBT/jXAU/41wFP+NcBT/jXAU/41wFP+NcBT/jXAU/4tuE/98YQ28c1kJFQAA
        AAAAAAAAAAAAAAAAAAAAetAAAHrQAAB60AAAetAA/wAAAHtfCpeScxT+lXYW/5N0Fv+TdBb/k3QW/5N0
        Fv+TdBb/k3QW/5N0Fv+TdBb/k3QW/5N0Fv+TdBb/k3QW/5N0Fv+TdBb/k3QW/5N0Fv+Wdhb/k3MV/3tg
        DJ5yWAkFAAAAAAB60AAAetAAAXzWAAWS/wAAec0UAHrPMQB6z0sAe9ZoM25/qYtxGPqigBj/mnoX/5l6
        F/+Zehf/mXoX/5l6F/+Zehf/mXoX/5l6F/+Zehf/mXoX/5l6F/+Zehf/mXoX/5l6F/+Zehf/mnsY/6KB
        Gf+QcRLmdlwLSHJYCQAAAAAAAHnOAAB1wgQAetAwAHzVhQB+270BgOHaAYHl8wGC6f8GgOD/U29d/6B+
        Fv+tiBn/o4Ia/59+Gf+efhn/n34Z/59+Gf+ffhn/n34Z/59+Gf+ffhn/n34Z/55+Gf+efhn/oH8Z/6WD
        Gv+tiRv/nXwV/X5jDZNmTgUHAAAAAAB4zAAAec4WAHzVfwKA4NoDhOv9A4bx/wOH8/8Dh/T/A4f1/wOI
        9v8Qgtj/T3Nq/5WBKf+2jxn/uJIc/7GNG/+riBv/p4Ua/6aEGv+mhBr/poQa/6aEGv+phhv/rosc/7WQ
        Hf+3khz/sY0a/518FOF/YwyLcVgJGpd1FAAAAAAAAHjLAQF81GoDg+X5BYnz/wWK9P8FivT/BYn0/wWJ
        9P8FifT/BYn0/wWK9f8Kh+n/J36x/2F7YP+TgCr/p4si/6+MG/+wjBz/rIkc/62JHP+tiRz/rooc/7GN
        G/+wjBn4poQW7Zl5E8yKbQ+IdVsKOmZOBgR2XAoAcVcJAAAAAAAAeM0QAn/aswiL8v8JjfX/CY31/wmN
        9f8JjfX/CY31/wmN9f8JjfX/CY31/wiN9v8Hjff/DIrr/xqEz/9EeID/lnsd/7SQHf+zjx3/s48d/7OP
        Hf+0kB7/p4UZ/4ZpDrZ2XAo7XkgEE0MxAAR3XQoAc1kKAAAAAAAAAAAAAAAAAAB4zRQEgNu7C47y/wuQ
        9f8LkPX/C5D1/wuQ9f8LkPX/C5D1/wuQ9f8LkPX/C5D1/wuQ9f8LkPb/CpD4/0h4ev+riBv/upUf/7qU
        H/+6lB//upQf/7qVH/+2kR7/jnAS1GlRBxh2XAoAdVsKAHVbCgAAAAAAAAAAAAAAAAAAAAAAAHbKBgN/
        2KcNk/T/D5X3/w+T9f8Pk/X/D5P1/w+T9f8Pk/X/D5P1/w+T9f8Pk/X/D5P1/w6U9v8UkOf/aHhQ/72U
        G//BmiH/wJoh/8CaIf/AmiH/wJoh/8GaIf+gfxfzel8LSQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAd8wAAn3UZg2U7/kTnvv/Epf1/xOX9f8Tl/X/E5f1/xOX9f8Tl/X/E5f1/xOX9f8Tl/X/EZj4/yOM
        zP+Efzr/xZwf/8efI//HnyP/x58j/8efI//HnyP/x58j/7OOHfx/Yw1/a1IHAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAdcwZB4jdzBSk9v8Yo/v/F5z3/xeb9v8Xm/b/F5v2/xeb9v8Xm/b/F5v2/xeb
        9v8Vnfr/L4q3/5yGKf/NpCP/zaQk/82kJP/NpCT/zaQk/82kJP/NpCT/w5wh/4ZqD6tqUgcEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzygIAetBFCY7ezxeq8/wcrvv/HKj7/xyj+P8boff/G5/2/xuf
        9v8bn/b/G5/2/xmh+/82iaz/q4sh/9SqJf/TqSb/06km/9OpJv/TqSb/06km/9OqJv/LoyP/k3QTvW5V
        CBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHXMAABhvgEAeM4pB4nYhBGg5dcZr/D/HbP1/x6t
        +v8fpvn/H6T2/x+k9v8fpPb/Hab8/zqRsP+vjyH/27Am/9muJv/Zrib/2a4m/9muJv/Zrib/2a4m/9Ko
        JP+ZeRTFb1YIHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHjPAAOA1AAAa8cFAHfOLwSD
        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
        P//8AD///AA///wAf//+AH///wD////D//8=
</value>
  </data>
</root>